package org.dosomething.android.activities;

import org.dosomething.android.R;
import org.dosomething.android.cache.DSPreferences;

import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.TextView;

import com.google.inject.Inject;
import com.xtify.sdk.api.NotificationsPreference;
import com.xtify.sdk.api.XtifySDK;

public class Welcome extends AbstractActivity {
	
	@Inject private LayoutInflater inflater;
	
	// Simple notification title
	private static final String NOTIFICATION_TITLE = "com.xtify.sdk.NOTIFICATION_TITLE";
	// Simple notification content
	private static final String NOTIFICATION_CONTENT = "com.xtify.sdk.NOTIFICATION_CONTENT";
	// The type of the action that was set in TARGET for the SDK to perform. (e.g. com.xtify.sdk.OPEN_URL)
	private static final String NOTIF_ACTION_TYPE = "com.xtify.sdk.NOTIF_ACTION_TYPE";
	// Custom key where payload will tell us what page/activity to load
	private static final String NOTIF_ACTIVITY = "xtify.activity";
	// Custom key where payload tells us what campaign page to load
	private static final String NOTIF_CAMPAIGN = "xtify.campaign";
	
	// Xtify app key generated by app manager - see console.xtify.com/manage-app-keys
	private static final String XTIFY_APP_KEY = "4449bd82-e180-4ed7-8dc5-ecd9ff1738d0";
	// Sender ID is the Google API project #
	private static final String SENDER_ID = "1066768272703";
	private Dialog splashDialog;
	private boolean skipWelcome = true;
	
	@Override
	protected String getPageName() {
		return "welcome";
	}
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.welcome);
		
		// Determine if app is launched from an Xtify notification
		boolean notificationReceived = false;
		Intent intent = getIntent();
		if (intent != null && 
			intent.getStringExtra(NOTIFICATION_TITLE) != null &&
			intent.getStringExtra(NOTIFICATION_CONTENT) != null) {
			
			notificationReceived = true;
		}
		
		// Customizing Xtify notifications settings
        Context context = getApplicationContext();
        NotificationsPreference.setVibrateEnabled(context, true);
        long[] vibratePattern = {0, 100, 200, 300};
        NotificationsPreference.setVibrationPattern(context, vibratePattern);
        NotificationsPreference.setIcon(context, R.drawable.ic_launcher);
        NotificationsPreference.setLightsEnabled(context, true);
        int ledARGB = 0xb99aff;
        int ledOnMS = 300;
        int ledOffMS = 1000;
        NotificationsPreference.setLights(context, new int[] {ledARGB, ledOnMS, ledOffMS});
        
//      String xid = XtifySDK.getXidKey(getApplicationContext());
//		String appkey = XtifySDK.getAppKey(getApplicationContext());
//		String ver = XtifySDK.getSdkVerNumber();
//		boolean notifEnabled = XtifySDK.isNotificationEnabled(getApplicationContext());
//		Log.v("XTIFY", "xid="+xid+" / appkey="+appkey+" / ver="+ver+" / notifEnabled="+notifEnabled);
		
		MyModel model = (MyModel) getLastNonConfigurationInstance();
        if (model != null) {
	        if (model.isShowSplashScreen()) {
	            showSplashScreen();
	        }
	    } else {
	    	if (intent.hasCategory("android.intent.category.LAUNCHER") || notificationReceived) {
	    		showSplashScreen();
	    	}
	    }
        
        DSPreferences prefs = new DSPreferences(this);
        // If initial app execution, stay on the Welcome activity
        if (prefs != null && !prefs.getHasRun() && !notificationReceived) {
        	// Set boolean to indicate that this app has now been run
        	prefs.setHasRun();
        	skipWelcome = false;
        }
        else {
        	// On subsequent app executions, just send user to Profile page
        	skipWelcome = true;
        }
	}
	
	@Override
	public void onStart() {
		super.onStart();
		XtifySDK.start(getApplicationContext(), XTIFY_APP_KEY, SENDER_ID);
	}
	
	public void continueToCauses(View v) {
		startActivity(new Intent(this, CauseSelector.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP));
		finish();
	}
	
	@Override
	public Object onRetainNonConfigurationInstance() {
	    MyModel model = new MyModel();
	    
	    if (splashDialog != null) {
	        model.setShowSplashScreen(true);
	        removeSplashScreen();
	    }
	    return model;
	}
	
	/**
	 * Removes the Dialog that displays the splash screen
	 */
	protected void removeSplashScreen() {
		if (skipWelcome) {
			boolean bGoToProfile = true;
			// Handle payload sent from push notifications
			Intent intent = getIntent();
			if (intent != null && 
				intent.getStringExtra(NOTIF_ACTION_TYPE) != null &&
				intent.getStringExtra(NOTIF_ACTION_TYPE).compareTo("com.xtify.sdk.SHOW_NOTIF") == 0) {
				
				String intentNotifActivity = intent.getStringExtra(NOTIF_ACTIVITY);
				if (intentNotifActivity != null) {
					if (intentNotifActivity.compareTo("campaigns") == 0) {
						startCampaignsActivity();
						bGoToProfile = false;
					}
					else if (intentNotifActivity.compareTo("campaign") == 0) {
						String intentCampaign = intent.getStringExtra(NOTIF_CAMPAIGN);
						startCampaignActivity(intentCampaign);
						//bGoToProfile = false;
					}
				}
			}
			
			if (bGoToProfile)
				startProfileActivity();
		}
	    
	    if (splashDialog != null) {
	    	splashDialog.dismiss();
	    	splashDialog = null;
	    }
	    
	    if (skipWelcome)
	    	finish();
	}
	 
	/**
	 * Shows the splash screen over the full Activity
	 */
	protected void showSplashScreen() {
		// Set the versionName in the splash screen
		String version = "";
		try {
			PackageInfo pInfo = this.getPackageManager().getPackageInfo(this.getPackageName(), 0);
			version = pInfo.versionName;
		}
		catch (NameNotFoundException e) {
		}

		View v = inflater.inflate(R.layout.splash_screen, null);
		if (version.length() > 0) {
			TextView tv = (TextView)v.findViewById(R.id.versionName);
			tv.setText(getString(R.string.splash_version)+version);
		}
		splashDialog = new Dialog(this, R.style.SplashScreen);
		splashDialog.setContentView(v);
		splashDialog.setCancelable(false);
		splashDialog.show();
	 
	    // Set Runnable to remove splash screen just in case
	    final Handler handler = new Handler();
	    handler.postDelayed(new Runnable() {
	      @Override
	      public void run() {
	        removeSplashScreen();
	      }
	    }, 3000);
	}
	
	/**
	 * Starts Profile Activity
	 */
	private void startProfileActivity() {
		startActivity(new Intent(this, Profile.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP));
	}
	
	/**
	 * Starts Campaigns Activity
	 */
	private void startCampaignsActivity() {
		startActivity(new Intent(this, Campaigns.class).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP));
	}
	
	/**
	 * Starts activity for specified campaign
	 */
	private void startCampaignActivity(String campaignName) {
		//startActivity(org.dosomething.android.activities.Campaign.getIntent(getApplicationContext(), campaign));
	}
	
	/**
	 * Simple class for storing important data across config changes
	 */
	private class MyModel {
	    private boolean showSplashScreen = false;

		public boolean isShowSplashScreen() {
			return showSplashScreen;
		}
		public void setShowSplashScreen(boolean showSplashScreen) {
			this.showSplashScreen = showSplashScreen;
		}
	}

}
